-
  In order to test the functionality of ir.sequence
-
  I will create a testing type for sequences
-
  !record {model: ir.sequence.type, id: test_sequence_type_1}:
    name: Testing type
    code: ir.sequence.test-type
-
  Then I will create 4 sequences
-
  !record {model: ir.sequence, id: test_sequence_1}:
    code: ir.sequence.test-type
    name: Test sequence 1
    prefix: 'TS1-'
    number_next: 10
    padding: 3
    company_id: False
-
  !record {model: ir.sequence, id: test_sequence_2}:
    code: ir.sequence.test-type
    name: Test sequence 2
    prefix: 'TS2-'
    number_next: 20
    padding: 3
    company_id: base.main_company
-
  !record {model: ir.sequence, id: test_sequence_3}:
    code: ir.sequence.test-type
    name: Test sequence 3
    prefix: 'TS3-'
    number_next: 30
    padding: 3
    condition: var_id == 3
    company_id: base.main_company
    weight: 20
-
  !record {model: ir.sequence, id: test_sequence_4}:
    code: ir.sequence.test-type
    name: Test sequence 4
    prefix: 'TS4-'
    number_next: 40
    padding: 3
    weight: 80
    active: False
    company_id: False
-
  One more company
-
  !record {model: res.company, id: test_company_2 }:
    name: Company 2
-
  And one user
-
  !record { id: user_comp2, model: res.users }:
    login: demo_c2
    password: demo_c2
    name: Demo for Company 2
    company_id: test_company_2
    company_ids:
      - test_company_2
-
  I will try to get a number from the sequence, it should match TS2,
  because admin is in the main company
-
  !python {model: ir.sequence}: |
    seq = self.get_id(cr, uid, 'ir.sequence.test-type', 'code', context={})
    assert seq.startswith('TS2'), "Invalid sequence chosen: %s" % seq
-
  I will test again, because the SQL order may have changed
-
  !python {model: ir.sequence}: |
    for i in range(0, 4):
        seq = self.get_id(cr, uid, 'ir.sequence.test-type', 'code', context={})
        assert seq.startswith('TS2'), "Invalid sequence chosen: %s" % seq
-
  I will now try to reach the conditional sequence, with var_id = 3
-
  !python {model: ir.sequence}: |
    for i in range(0, 3):
        seq = self.get_id(cr, uid, 'ir.sequence.test-type', 'code', context={'var_id': 3})
        assert seq.startswith('TS3'), "Invalid sequence chosen: %s" % seq
-
  I will finally try to get a sequence as the user of company 2,
  It should never return me anything but TS1, as the others belong to main company
-
  !python {model: ir.sequence}: |
    uid2 = ref('base.user_comp2')
    for i in range(0, 4):
        seq = self.get_id(cr, uid2, 'ir.sequence.test-type', 'code', context={})
        assert seq.startswith('TS1'), "Invalid sequence chosen: %s" % seq
-
  I will create a second testing type
-
  !record {model: ir.sequence.type, id: test_sequence_type_2}:
    name: Testing type 2
    code: ir.sequence.test-type2
-
  Then I will create 2 sequences with maximum numbers
-
  !record {model: ir.sequence, id: test_sequence_b1}:
    code: ir.sequence.test-type2
    name: Test sequence B 1
    prefix: 'TS1-'
    number_next: 1
    padding: 2
    company_id: False
    weight: 50
    condition: this.number_next < 100
-
  !record {model: ir.sequence, id: test_sequence_b2}:
    code: ir.sequence.test-type2
    name: Test sequence B 2
    prefix: 'TS2-'
    number_next: 1
    padding: 2
    company_id: False
    weight: 40
    condition: this.number_next < 100
-
  I will now try to obtain 150 numbers
-
  !python {model: ir.sequence }: |
    for i in range(150):
        seq_id = self.get(cr, uid, 'ir.sequence.test-type2')
        # print "%d: %s" % (i, seq_id)
    assert seq_id == 'TS2-51', seq_id
